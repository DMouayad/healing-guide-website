---
interface Props {
    carouselId: string;
    classList?: string;
    slidesCount: number;
    withArrows?: boolean;
}
const { carouselId, slidesCount, classList, withArrows = false } = Astro.props;
const slidesIds = Array.from(Array(slidesCount).keys()).map((n) => n + 1);
function controlIsCurrent(index: number) {
    return index == 1 ? { checked: "yes" } : {};
}
const isArabic = Astro.currentLocale === "ar";
---

<div
    id={carouselId}
    class={"custom-carousel carousel-container " + (classList ?? "")}
    current-slide={carouselId + "_" + 1}
    slides-count={slidesCount}
>
    <div class="carousel">
        <slot />
    </div>
    <div id="controls" class="controls flex">
        {
            slidesIds.map((id) => (
                <input
                    {...controlIsCurrent(id)}
                    type="radio"
                    name={carouselId}
                    value={carouselId + "_" + id}
                    class="controls__dot"
                />
            ))
        }
    </div>
    {
        withArrows && (
            <div
                id="carousel-arrows"
                style="direction: ltr !important;"
                class=" absolute left-1 right-1  sm:left-5 sm:right-5  flex -translate-y-1/2 transform justify-between"
            >
                <button
                    id={isArabic ? "nextSlideBtn" : "prevSlideBtn"}
                    class={
                        "btn btn-sm active:btn-circle-shadow " +
                        (isArabic ? "" : "btn-disabled")
                    }
                >
                    ❮
                </button>
                <button
                    id={isArabic ? "prevSlideBtn" : "nextSlideBtn"}
                    class={
                        "btn btn-sm active:btn-circle-shadow " +
                        (isArabic || slidesCount <= 1 ? "btn-disabled" : "")
                    }
                >
                    ❯
                </button>
            </div>
        )
    }
</div>
