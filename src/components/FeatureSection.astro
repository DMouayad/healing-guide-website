---
interface FeatureDesc {
    title: string;
    content: string;
}
interface Props {
    title: string;
    description: string | FeatureDesc[];
    isLTR: boolean;
    ctaBtnTitle?: string;
    ctaBtnLink?: string;
}
const { title, description, isLTR, ctaBtnTitle, ctaBtnLink } = Astro.props;
---

<section>
    <div class="card md:card-side w-full h-[800px] min-h-fit md:h-auto">
        {
            isLTR && (
                <div class="hidden md:block basis-2/3">
                    <slot name="image" />
                </div>
            )
        }
        <div class="card-body">
            <div class="card-title flex flex-row mb-6">
                <slot />
                <div class="text-2xl ms-4 capitalize md:text-4xl">{title}</div>
            </div>
            {
                description && typeof description === typeof "" ? (
                    <p class="max-h-36 sm:max-h-54 min-h-min max-w-xl ">
                        {description}
                    </p>
                ) : (
                    description &&
                    (description as FeatureDesc[]).map((item) => (
                        <div class="w-full max-w-lg mb-5">
                            <div class="text-md font-semibold capitalize">
                                {item.title}
                            </div>
                            <div>{item.content}</div>
                        </div>
                    ))
                )
            }
            <div class="card-actions">
                <button class="btn btn-primary">{ctaBtnTitle}</button>
            </div>
        </div>
        {
            !isLTR && (
                <div class="hidden md:block basis-2/3">
                    <slot name="image" />
                </div>
            )
        }
        <div class="md:hidden h-[530px] basis-1/2">
            <slot name="image" />
        </div>
    </div>
</section>
<style>
    .feat-img {
        @apply rounded-lg;
        @apply bg-base-200;
    }
</style>
